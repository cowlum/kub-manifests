#  the service account permissions are found in ../auth/ directory
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: jenkins
  namespace: jenkins
  annotations:
    fluxcd.io/automated: "false"
spec:
  releaseName: jenkins
  interval: 1m
  chart:
    spec:
      chart: jenkins
      version: 5.6.3   # app 2.462.2
      sourceRef:
        kind: HelmRepository
        name: jenkins
        namespace: flux-system
      interval: 10m
  values:
    # can do SecretClaims from Vault
    # can do network policy
    serviceAccountAgent:
      create: true
      name: jenkins-agent
    persistence:
      existingClaim: pvc-jenkins-data
    controller:
#      image: "registry/my-jenkins"
#      tag: "v1.2.3"
#      installPlugins: false
#      imagePullSecretName: 
#      JCasC:
                # not sure if the situation requires public-client, all examples have it, and it saves Vault secrets
                #  Does actually work with client-secret set, but that potentially could be in client-side javascript?
#        configScripts:
#          rbac: |
#            jenkins:
#              authorizationStrategy:
#                roleBased:
#                  roles:
##                    global:
#                      - name: "admin"
#                        description: "Jenkins administrators"
#                        permissions:
#                          - "Overall/Administer"
#                        entries:
#                          - user: "admin"
#                          - user: "michael.dent"
#                      - name: "readonly"
#                        description: "Read-only users"
#                        permissions:
#                          - "Overall/Read"
#                          - "Job/Read"
#                        entries:
#                          - group: "authenticated"
#          keycloaksecurityrealm: |
#            jenkins:
#              securityRealm:
#                keycloak:
#                  keycloakJson: |-
#                    {
#                      "realm": "sso-dev",
#                      "auth-server-url": "https://kc.devstg.nesl.nz/",
#                      "ssl-required": "all",
#                      "resource": "jenkins",
#                      "public-client": true,
#                      "confidential-port": 0
#                    }
      additionalPlugins:
        - keycloak:2.3.2
        - role-strategy:689.v731678c3e0eb_   # RBAC
        - slack
        - global-slack-notifier
        - kubernetes-cli
        - github
      ingress:
        enabled: true
        apiVersion: "networking.k8s.io/v1"
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
        hostName: jenkins.mycluster218
#        tls:
#          - secretName: jenkins.devstg.nesl.nz-tls
#            hosts:
#              - jenkins.devstg.nesl.nz
#      resources:
#        requests:
#          cpu: "50m"
#          memory: "1120Mi"
#        limits:
#          memory: "1139Mi"  # default
#    agent:
#      resources:
#        requests:
#          cpu: "256m"
#          memory: "1536Mi"
#        limits:
#          memory: "4096Mi"
    # backups:
    # prometheus
    # serviceAccountAgent
#---
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: jenkins-functions-agent
#  namespace: cluster-ops
#spec:
#  accessModes:
#    - ReadWriteMany
#  storageClassName: rook-cephfs-retain
#  volumeMode: Filesystem
#  resources:
#    requests:
#      storage: 0Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-jenkins-data
  namespace: jenkins
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: dobs-csi-retain
  volumeMode: Filesystem
  resources:
    requests:
      storage: 1Gi
#---
#apiVersion: velero.io/v1
#kind: Schedule
#metadata:
#  name: jenkins
#  namespace: cluster-ops
#spec:
#  schedule: 21 12 * * *   # min hourr dayOfMonth month dayOfWeek in UTC time
#  template:
#    csiSnapshotTimeout: 10m
#    includedNamespaces:
#    - 'cluster-ops'
#    includedResources:
#    - '*'
#    includeClusterResources: null
#    labelSelector:
#      matchLabels:
#        app.kubernetes.io/instance: jenkins
#    snapshotVolumes: true
#    storageLocation: default
#    volumeSnapshotLocations:
#      - default
#    ttl: 96h0m0s
#    # Whether restic should be used to take a backup of all pod volumes by default.
#    defaultVolumesToRestic: false
#    # Actions to perform at different times during a backup. The only hook supported is
#    # executing a command in a container in a pod using the pod exec API. Optional.
#    # hooks:
